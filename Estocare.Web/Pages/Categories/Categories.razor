@page "/categories"
@using Estocare.Web.Models.DTOs
@using Estocare.Web.Services
@inject CategoryService CategoryService
@inject IJSRuntime JSRuntime

<!-- Cabeçalho da página -->
<div class="categories-header">
    <h1>Gerenciamento de Categorias</h1>
    <button @onclick="ShowAddCategoryModal">Adicionar Nova Categoria</button>
</div>

<!-- Listagem de categorias -->
<div class="categories-container">
    @if (isLoading)
    {
        <!-- Exibe um texto enquanto carrega as categorias -->
        <p>Carregando categorias...</p>
    }
    else if (!categories.Any())
    {
        <!-- Exibe um texto caso não existam categorias cadastradas -->
        <p>Nenhuma categoria encontrada.</p>
    }
    else
    {
        <!-- Lista todas as categorias retornadas do backend -->
        <ul>
            @foreach (var category in categories)
            {
                <li>
                    <span>@category.Name</span>
                    <button @onclick="() => EditCategory(category)">Editar</button>
                    <button @onclick="() => ConfirmDeleteCategory(category.Id)">Excluir</button>
                </li>
            }
        </ul>
    }
</div>

<!-- Modal para adicionar nova categoria -->
@if (showAddCategoryModal)
{
    <div class="modal-backdrop">
        <div class="modal">
            <div class="modal-header">
                <h5>Adicionar Nova Categoria</h5>
                <button class="close" @onclick="CloseAddCategoryModal">&times;</button>
            </div>
            <div class="modal-body">
                <AddCategory OnCategoryAdded="OnCategoryAdded" OnCancel="CloseAddCategoryModal" />
            </div>
        </div>
    </div>
}

<!-- Exibição de mensagens de erro -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div style="color: red;">@errorMessage</div>
}

@code {
    // Lista de categorias carregadas do backend
    private List<CategoryDto> categories = new List<CategoryDto>();

    // Indica se os dados estão sendo carregados
    private bool isLoading = true;

    // Controle para exibição do modal
    private bool showAddCategoryModal = false;

    // Mensagem de erro para exibição ao usuário
    private string? errorMessage = null;

    /// <summary>
    /// Método chamado ao inicializar a página para carregar as categorias.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    /// <summary>
    /// Carrega as categorias do backend e atualiza a lista.
    /// </summary>
    private async Task LoadCategories()
    {
        try
        {
            isLoading = true;
            categories = await CategoryService.GetAllCategoriesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao carregar categorias: {ex.Message}";
            Console.WriteLine(ex);
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Exibe o modal para adicionar uma nova categoria.
    /// </summary>
    private void ShowAddCategoryModal()
    {
        showAddCategoryModal = true;
    }

    /// <summary>
    /// Fecha o modal de adicionar categoria.
    /// </summary>
    private void CloseAddCategoryModal()
    {
        showAddCategoryModal = false;
    }

    /// <summary>
    /// Método chamado quando uma nova categoria é adicionada com sucesso.
    /// </summary>
    private async Task OnCategoryAdded()
    {
        await LoadCategories();
        CloseAddCategoryModal();
    }

    /// <summary>
    /// Prepara o formulário para editar uma categoria existente.
    /// </summary>
    /// <param name="category">Categoria selecionada para edição.</param>
    private void EditCategory(CategoryDto category)
    {
        // Lógica para editar categoria
    }

    /// <summary>
    /// Solicita a confirmação do usuário antes de excluir uma categoria.
    /// </summary>
    /// <param name="id">ID da categoria a ser excluída.</param>
    private async Task ConfirmDeleteCategory(int id)
    {
        // Usa uma função de JavaScript para exibir uma confirmação
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Deseja realmente excluir esta categoria?" }))
        {
            await DeleteCategory(id);
        }
    }

    /// <summary>
    /// Exclui uma categoria pelo ID.
    /// </summary>
    /// <param name="id">ID da categoria a ser excluída.</param>
    private async Task DeleteCategory(int id)
    {
        try
        {
            await CategoryService.DeleteCategoryAsync(id);
            await LoadCategories();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro ao excluir categoria: {ex.Message}";
            Console.WriteLine(ex);
        }
    }
}
